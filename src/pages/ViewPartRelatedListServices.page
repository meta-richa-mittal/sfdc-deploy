<apex:page standardStylesheets="false" showChat="false" showHeader="false" controller="ViewPartRelatedListCtrl" sidebar="false" applyHtmlTag="false" applyBodyTag="false" 
    contentType="application/javascript">

    define(['Routing_AppJs_PK'], function (Routing_AppJs_PK) {

        Routing_AppJs_PK.factory('ActiveOrdersServices', ['$q', function ($q) {
            return {
                getPaginatedActiveOrdersForPart: function(partId, pageSortAttrsJSON)
	            {
	            		pageSortAttrsJSON = angular.toJson(pageSortAttrsJSON);
	            		return RemoteActionService($q, '{!$RemoteAction.ViewPartRelatedListCtrl.getPaginatedActiveOrdersForPart}', partId, pageSortAttrsJSON);
	            }
            };
        }]);  
        
        Routing_AppJs_PK.factory('ActiveSalesOrdersServices', ['$q', function ($q) {
            return {
                getPaginatedActiveSalesOrdersForPart: function(partId, pageSortAttrsJSON)
	            {
	            		pageSortAttrsJSON = angular.toJson(pageSortAttrsJSON);
	                    return RemoteActionService($q, '{!$RemoteAction.ViewPartRelatedListCtrl.getPaginatedActiveSalesOrdersForPart}', partId, pageSortAttrsJSON);
	            }
            };
        }]);  
        
        Routing_AppJs_PK.factory('AlternatePartsServices', ['$q', function ($q) {
            return {
                addAlternatePartToPart: function(alternatePartsJSON)
	            {
	            		alternatePartsJSON = angular.toJson(alternatePartsJSON);
	            		return RemoteActionService($q, '{!$RemoteAction.ViewPartRelatedListCtrl.addAlternatePartToPart}', alternatePartsJSON);
	            },
	            
	            // Service method to update an alternate part relation
	            updateAlternatePartRelation: function(partId, alternatePartJunctionId, alternateOrderRelation, alternatePartsPaginationJSON)
	            {
	                    return RemoteActionService($q, '{!$RemoteAction.ViewPartRelatedListCtrl.changeAlternatePartRelation}', partId, alternatePartJunctionId, alternateOrderRelation, alternatePartsPaginationJSON);
	            },
	            
	            // Service method to update record as preffered record
				updateDefaultAlternatePart: function (partId, alternatePartJunctionId, preferredValToUpdate) {
					return RemoteActionService($q, '{!$RemoteAction.ViewPartRelatedListCtrl.updateDefaultAlternatePart}', partId, alternatePartJunctionId, preferredValToUpdate);
				},
	            
	            // Service method to remove an alternate part relation
	            removeAlternatePartRelation: function(partId, alternatePartJunctionId, pageSortAttrsJSON)
	            {
	            		pageSortAttrsJSON = angular.toJson(pageSortAttrsJSON);
	            		return RemoteActionService($q, '{!$RemoteAction.ViewPartRelatedListCtrl.removeAlternatePartRelation}', partId, alternatePartJunctionId, pageSortAttrsJSON);
	            },
	            
	            // Service method to get alternate part records as per pagination and sorting attributes
	            getPaginatedAlternatePartsForPart: function(partId, pageSortAttrsJSON)
	            {
	            		pageSortAttrsJSON = angular.toJson(pageSortAttrsJSON);
	                    return RemoteActionService($q, '{!$RemoteAction.ViewPartRelatedListCtrl.getPaginatedAlternatePartsForPart}', partId, pageSortAttrsJSON);
	            }
            };
        }]);  
        
        Routing_AppJs_PK.factory('TaxExemptionsServices', ['$q', function ($q) {
            return {
	            // Service method to get alternate part records as per pagination and sorting attributes
	            getPaginatedTaxExemptionsForPart: function(partId, pageSortAttrsJSON)
	            {
	            		pageSortAttrsJSON = angular.toJson(pageSortAttrsJSON);
	            		return RemoteActionService($q, '{!$RemoteAction.ViewPartRelatedListCtrl.getPaginatedTaxExemptionsForPart}', partId, pageSortAttrsJSON);
	            }
            };
        }]);  
        
        return Routing_AppJs_PK;
    }); 
</apex:page>