<apex:component controller="AutoCompleteCtrl" >
<apex:stylesheet value="{!Application}/css/autocomplete1.css"/>
<script>
    var app = angular.module('autocomplete1', []);

    app.factory('autoCompleteService', function ($q) {
        return {
        	searchText: function(textToSearch){
           		return RemoteActionService($q, '{!$RemoteAction.AutoCompleteCtrl.getSearchResults}', textToSearch);
           	}
        }
    }); 
    
    app.directive('autocomplete1', function ($parse, $sce, $timeout, $q, autoCompleteService) {
        return {
            restrict : 'EA',
            scope : {
                "id" : "@id",
                "placeholder" : "@placeholder",
                "validationkey" : "@validationkey",
                "typeToSearch" : "@type",
                "titleField" : "@titlefield",
                "errorclass" : "=",
                "typesearchmodal" : "=",
                "relValue" : "@relValue",
                "tabIndex" : "@tabIndex",
                "filterParam" : "=",
                "disableAttr" : "=",
                "relValue" :  "@"
                
            },
            template : '<div class="autoComplete1">'+ 
	            			'<div class="searchInputArea" ng-class="{\'showingOverlay\' : showDropdown}">'+
								'<i class="bp-icons bp-font-15 bp-grey-font bp-lh-15 stroke-3">search</i>'+
								'<input type="text" class="searchInput"'+ 
									'placeholder="{{placeholder}}"'+
									'ng-focus="getintialdata()"'+
									'ng-blur="setselecteddata()" '+
									'ng-model="typesearchmodal" id = "{{id}}_value"/>'+
								'<div class="searchResultOverlay">'+
									'<ul>'+
										'<li ng-repeat="result in results" ng-click="selectResult(result)" ng-mouseover="hoverRow($index)"'+
											'ng-mousedown="EditGroupPermissionsModel.selectUser(user)"'+
											'ng-class="{\'hoverli\': $index == currentIndex}">'+
											<!-- <div class="shortName  text-uppercase">{{user.UserFirstName | limitTo : 1}}{{user.UserLastName | limitTo : 1}}</div> -->
											'<div class="fullName  text-capitalize">{{result.title}}</div>'+
										'</li>'+ 
									'</ul>'+
								'</div>'+
							'</div>'+
						'</div>',
    
            link : function ($scope, elem, attrs) {
                $scope.lastSearchTerm = null;
                $scope.currentIndex = null;
                $scope.justChanged = false;
                $scope.searchTimer = null;
                $scope.hideTimer = null;
                $scope.searching = false;
                $scope.pause = 500;
                $scope.minLength = 3;
                $scope.searchStr = null;
                $scope.UserDetails = null;
    
    
                $scope.getintialdata = function () {
                    $scope.currentIndex = null;
                    $scope.showDropdown = false;
                    $scope.results = [];
                    $scope.searching = false;
    
                    setTimeout(function () {
                        angular.element('[data-toggle="tooltip"]').tooltip({
                            placement : 'bottom'
                        });
                    }, 10);
                   showToolTip(attrs.relValue); 
                }
    
                $scope.setselecteddata = function () {
                    $scope.selectResult($scope.results[$scope.currentIndex]);
                    $scope.currentIndex = null;
                }
    
                if ($scope.userPause) {
                    $scope.pause = $scope.userPause;
                }
    
                $scope.isNewSearchNeeded = function (newTerm, oldTerm) {
                    return newTerm.length >= $scope.minLength && newTerm != oldTerm
                }
    
                $scope.processResults = function (responseData, str) {
    
                    if (responseData.length > 0) {
                        if (responseData && responseData.length > 0) {
                            $scope.results = [];
                            var counter = ((responseData.length) > 10 ? 10 : responseData.length);
                            var titleFields = [];
                            var compareval = 0;
    
                            for (var i = 0; i < counter; i++) {
                                // Get title variables
                                var text = '';
                                if($scope.typeToSearch == 'Fee'){
                                	text += responseData[i]['feeDetails']['Code']+' - ';
                                	text += responseData[i]['feeDetails']['Description']+' - ';
                                	text += '$'+responseData[i]['feeDetails']['Price'].toFixed(2);
                                }
                                //text = responseData[i][$scope.titleField];
                                var resultRow = {
                                    title : $sce.trustAsHtml(text),
                                    originalObject : responseData[i],
                                }
                                $scope.results[$scope.results.length] = resultRow;
                            }
                        }
                    }
                }
    
                $scope.searchTimerComplete = function (str) {
                    if (str != null) {
                        if (str.length >= $scope.minLength) {
                            $scope.SearchSuggestion(str);
                        }
                    } else {
                        $scope.SearchSuggestion("");
                    }
                }
    
                $scope.SearchSuggestion = function (str) {
                    var searchQueryJson = {
                        "ObjectLabel" : $scope.typeToSearch,
                        "SearchText" : str,
                        "SearchFieldName" : $scope.typeToSearch,
                        "FilterValues" : $scope.filterParam
                    }
                    searchQueryJson = JSON.stringify(searchQueryJson);
                    var responseData = "";
    
                    autoCompleteService.searchText(searchQueryJson)
                    .then(function (successfulSearchResult) {
                        responseData = successfulSearchResult;
                        $scope.searching = false;
                        $scope.processResults((($scope.dataField) ? responseData[$scope.dataField] : responseData));
                    }, function (errorSearchResult) {
                        responseData = errorSearchResult;
                        $scope.searching = false;
                    });
                }
    
                $scope.hideResults = function () {}
                $scope.resetHideResults = function () {}
    
                $scope.hoverRow = function (index) {
                    var inputFieldEle = elem.find('.angucomplete-row');
                    inputFieldEle.addClass('angucomplete-selected-rowHover');
                    $scope.currentIndex = index;
                }
    
                $scope.keyPressed = function (event) {
                    $scope.searchStr = $scope.typesearchmodal;
                    if (!(event.which == 38 || event.which == 40 || event.which == 13)) {
                        if (!$scope.searchStr || $scope.searchStr == "") {
                            $scope.showDropdown = false;
                            $scope.lastSearchTerm = null
                        } else if ($scope.isNewSearchNeeded($scope.searchStr, $scope.lastSearchTerm)) {
                            $scope.lastSearchTerm = $scope.searchStr;
                            $scope.showDropdown = true;
                            $scope.currentIndex = -1;
                            $scope.results = [];

                            if ($scope.searchTimer) {
                                $timeout.cancel($scope.searchTimer);
                            }

                            $scope.searching = true;
                            $scope.searchTimer = $timeout(function () {
                                $scope.searchTimerComplete($scope.searchStr);
                            }, $scope.pause);
                        }
                    } else {
                        event.preventDefault();
                    }
                }
    
                $scope.selectResult = function (result) {
                    if (typeof result != 'undefined') {
                        $scope.typesearchmodal = $scope.searchStr = $scope.lastSearchTerm = result.title;
                    }
    
                    $scope.showDropdown = false;
                    $scope.results = [];
                    
                    if ($scope.typesearchmodal == "") {
                        result = {
                            originalObject : {
                                Name : "",
                                Value : null
                            }
                        };
    
                        $scope.$emit('autoCompleteSelectCallback', {
                            ObejctType : $scope.typeToSearch,
                            SearchResult : result,
                            ValidationKey : $scope.validationkey,
                            Index: $scope.id
                        });
                    } else if (typeof result != 'undefined') {
                        $scope.$emit('autoCompleteSelectCallback', {
                            ObejctType : $scope.typeToSearch,
                            SearchResult : result,
                            ValidationKey : $scope.validationkey,
                            Index: $scope.id
                        });
                    } else {
                        $scope.$emit('autoCompleteSelectCallback', {
                            ObejctType : $scope.typeToSearch,
                            SearchResult : null,
                            ValidationKey : $scope.validationkey,
                            Index: $scope.id
                        });
                    }
                }
    
                var inputField = elem.find('input');
                inputField.on('keyup', $scope.keyPressed);
    
                elem.on("keyup", function (event) {
                    if (event.which === 40) {
                        if ($scope.results && ($scope.currentIndex + 1) < $scope.results.length) {
                            $scope.currentIndex++;
                            $scope.$apply();
    
                            var inputFieldEle = elem.find('.angucomplete-row');
                            inputFieldEle.removeClass('angucomplete-selected-rowHover');
    
                            event.preventDefault;
                            event.stopPropagation();
                        }
                        $scope.$apply();
                    } else if (event.which == 38) {
                        if ($scope.currentIndex >= 1) {
                            $scope.currentIndex--;
                            var inputtextField = elem.find('input');
    
                            $scope.$apply();
                            event.preventDefault;
                            event.stopPropagation();
                        }
                    } else if (event.which == 13) {
                        if ($scope.results && $scope.currentIndex >= 0 && $scope.currentIndex < $scope.results.length) {
                            $scope.selectResult($scope.results[$scope.currentIndex]);
    
                            $scope.$apply();
                            event.preventDefault;
                            event.stopPropagation();
                        } else {
                            $scope.showDropdown = true;
                            event.preventDefault;
                            event.stopPropagation();
                        }
                    } else if (event.which == 27) {
                        $scope.results = [];
                        $scope.showDropdown = false;
                        $scope.$apply();
                    } else if (event.which == 9) {
                        $scope.results = [];
                        $scope.showDropdown = false;
                        $scope.currentIndex = null;
                        $scope.$apply();
                    }
                });
            }
        };
    });
</script>

</apex:component>