/**
 * Author: Ashish Garg
 * Since: July 3, 2015
 * Name: ViewVendorRelatedListCtrl
 * Description: Controller Class of Vendor Related List Component.
**/
global without sharing class ViewVendorRelatedListCtrl {
    public Decimal Home_Search_Grid_Page_Size { get{return GeneralConfiguration.getHomeSearchGridPageSize();} private set;}
    public Decimal Related_List_Page_Size { get{return GeneralConfiguration.getRelatedListPageSize();} private set;}
    public boolean Is_Widget_Removeable {get{return GeneralConfiguration.isWidgetRemoveable();}}
    public boolean Load_New_Customer_Order {get{return GeneralConfiguration.isLoadNewCustomerOrder();} private set;}
    public boolean Load_New_View_Customer {get{return GeneralConfiguration.isLoadNewViewCustomer();} private set;}
    public Decimal Sales_Tax_Rate {get{return GeneralConfiguration.getAustralianMarketSalesTaxRate();} private set;}

    global ViewVendorRelatedListCtrl (NewHomePageCtrl controller){}
    public ViewVendorRelatedListCtrl() {}
    
    /*****************************  START: PURCHASE ORDER TYPES SECTION *****************************************/
    /**
     * Name: addPOTypeToVendor
     * Desc: Add a Purchase Order record with supplied values
     * @param:  (1) poTypesJSON - String - JSON formatted array of Purchase Order records need to be inserted
     * @return: String - If a single record is inserted, then return value will be detailed record in JSON format
     *Comments : Try catch and FLS Done
    **/
    @RemoteAction
    global static String addUpdatePOTypeToVendor(String poTypesJSON) {

        poTypesJSON = BPUtility.getDecodedString(poTypesJSON);
  
        try{
            List<POType> poTypesList = POType.parse(poTypesJSON);
            if(poTypesList.size() == 0){
                return BPUtility.getEncodedString('[]');
            }
            if(getSimilarPOType(poTypesList[0].Code, poTypesList[0].VendorId,poTypesList[0].Id) == 'true') {
                return 'Same VO Type Code already present for vendor';
            }
            
            // Else add the record in database
            List<PO_Type__c> poTypesToUpsert = new List<PO_Type__c>();
            for(POType poType : poTypesList){
                PO_Type__c poTypeRec = new PO_Type__c(  Vendor__c = poType.VendorId,
                                                        Code__c = poType.Code,
                                                        Lead_Time__c = poType.LeadTime,
                                                        Discount__c = poType.Discount,
                                                        Usage__c = poType.Usage,
                                                        IsDefault__c = (poType.IsDefault != null) ? poType.IsDefault : false,
                                                        Update_Current_Cost__c = (poType.UpdateCurrentCost != null) ? poType.UpdateCurrentCost : false
                                                        );
                if(poType.Id != null) {
                    poTypeRec.Id = poType.Id;
                }
                poTypesToUpsert.add(poTypeRec);
            }
            if(AccessControl.ifObjectFieldIsCreateable('PO_Type__c') == false){throw new BlackPurlException(Constants.OBJIECT_NOT_CREATEABLE);}
            if(AccessControl.ifObjectIsUpdateable('PO_Type__c') == false){throw new BlackPurlException(Constants.OBJIECT_NOT_UPDATEABLE);}
            upsert poTypesToUpsert;
            
            if(poTypesList.size() == 1){
                return BPUtility.getEncodedString(System.JSON.serialize( new List<POType.POTypeWrapper>{new POType.POTypeWrapper(poTypesToUpsert[0], poTypesToUpsert[0].Vendor__c)} ));
            }
            return BPUtility.getEncodedString('[]');
        }catch(exception ex){
          throw new BlackPurlException(BlackPurlException.getErrorMessage(ex.getMessage(), ex.getStackTraceString()));
      }
    }

    global static String getSimilarPOType(String poTypeCode, String vendorId, String poTypeId) {
        poTypeCode = BPUtility.escapeSingleQuotes(poTypeCode);
        vendorId = BPUtility.escapeSingleQuotes(vendorId);
        poTypeId = BPUtility.escapeSingleQuotes(poTypeId);
        if(AccessControl.ifObjectFieldIsAccessible('PO_Type__c') == false) { throw new BlackPurlException(Constants.OBJIECT_NOT_ACCESSIBLE); }
        List<PO_Type__c> poTypeList = [select Id from PO_Type__c where Code__c =: poTypeCode AND Vendor__c =: vendorId AND Id != :poTypeId];
        String isSimilarPresent;
        if(poTypeList.size() > 0) {
            isSimilarPresent = 'true';
        } else {
            isSimilarPresent = 'false';
        }
        return isSimilarPresent;

    }
    /**
     * Name: updateDefaultPOType
     * Desc: method to update record as preffered record
     * @param: (1) poTypeId - String - Id of Alternate Vendor junction object record
     * @return: String
     * Comments : Try catch and FLS Done
    **/
    @RemoteAction
    global static String updateDefaultPOType(String vendorId, String poTypeId, boolean defaultValToUpdate) {

        vendorId = Id.valueOf(BPUtility.getDecodedString(vendorId));
        poTypeId = Id.valueOf(BPUtility.getDecodedString(poTypeId));
        poTypeId = BPUtility.escapeSingleQuotes(poTypeId);
        try{
            List<PO_Type__c> poTypestoUpdate = new List<PO_Type__c>();
            if(defaultValToUpdate){
                if(AccessControl.ifObjectFieldIsAccessible('PO_Type__c') == false) { throw new BlackPurlException(Constants.OBJIECT_NOT_ACCESSIBLE); }
                List<PO_Type__c> prevDefaultPOTypes = [Select Id, IsDefault__c from PO_Type__c where IsDefault__c = true AND Id !=: poTypeId AND Vendor__c =: vendorId];
                if(prevDefaultPOTypes.size() > 0){
                    for(PO_Type__c poTypeRec : prevDefaultPOTypes){
                        poTypeRec.IsDefault__c = false;
                        poTypestoUpdate.add(poTypeRec);
                    }
                }
            }
            PO_Type__c recToUpdate = new PO_Type__c(Id = poTypeId, IsDefault__c = defaultValToUpdate);
            poTypestoUpdate.add(recToUpdate);
            
            if(AccessControl.ifObjectIsUpdateable('PO_Type__c') == false){throw new BlackPurlException(Constants.OBJIECT_NOT_UPDATEABLE);}
            update poTypestoUpdate;
            
            if(poTypestoUpdate.size() > 1){
                String infoMsg = '';
                return BPUtility.getEncodedString(String.valueOf(getTotalPOTypesForVendor(vendorId)) + ',' + infoMsg);
            }
            return BPUtility.getEncodedString(String.valueOf(getTotalPOTypesForVendor(vendorId)));
        }catch(exception ex){
          throw new BlackPurlException(BlackPurlException.getErrorMessage(ex.getMessage(), ex.getStackTraceString()));
      } 
    }
    
    /**
     * Name: getPOTypeInfoById
     * Desc: Method to get POType record information for POType Id in parameters
     * @param:  (1) poTypeId - Id
     * @return: String - List JSON format for record
    **/
    @RemoteAction
    global static String getPOTypeInfoById(String poTypeId) {
        poTypeId = Id.valueOf(BPUtility.getDecodedString(poTypeId));
        try{
            if(poTypeId == null){
                return '[]';
            }
            // Else add the record in database
            List<PO_Type__c> poTypeRecords = SOQLUtil.getPOTypeRecordsById(new List<Id>{poTypeId} );
            if(poTypeRecords.size() != 0){
                return BPUtility.getEncodedString(System.JSON.serialize( new List<POType>{new POType(poTypeRecords[0])} ));
            }
            return BPUtility.getEncodedString('[]');
        }catch(exception ex){
            throw new BlackPurlException(BlackPurlException.getErrorMessage(ex.getMessage(), ex.getStackTraceString()));
        }
    }
    
    /**
     * Name: removePOType
     * Desc: Delete the record
     * @param: (1) poTypeId - String - Id of Alternate Vendor junction object record
     * @return: String
    **/
    @RemoteAction
    global static String removePOType(String vendorId, String poTypeId, String pageSortAttrsJSON) {
        vendorId = Id.valueOf(BPUtility.getDecodedString(vendorId));
        poTypeId = Id.valueOf(BPUtility.getDecodedString(poTypeId));
        pageSortAttrsJSON = BPUtility.getDecodedString(pageSortAttrsJSON);
        
        try{
            PO_Type__c recToDel = new PO_Type__c(Id = poTypeId);
            if(AccessControl.ifObjectIsDeletable('PO_Type__c') == false){throw new BlackPurlException(Constants.OBJIECT_NOT_DELETABLE);}
            delete recToDel;
            return BPUtility.getEncodedString(System.JSON.serialize( new AllPOTypesWrapper(vendorId, pageSortAttrsJSON) ));
        }catch(exception ex){
            throw new BlackPurlException(BlackPurlException.getErrorMessage(ex.getMessage(), ex.getStackTraceString()));
        }
    }
    
    /**
     * Name: getPaginatedPOTypesForVendor
     * Desc: Method to get records as per pagination and sorting attributes
     * @param: (1) poTypeId - String - Id of Alternate Vendor junction object record
     * @return: String
    **/
    @RemoteAction
    global static String getPaginatedPOTypesForVendor(String vendorId, String pageSortAttrsJSON) {
        vendorId = Id.valueOf(BPUtility.getDecodedString(vendorId));
        pageSortAttrsJSON = BPUtility.getDecodedString(pageSortAttrsJSON);
        
        return BPUtility.getEncodedString(System.JSON.serialize( new AllPOTypesWrapper(vendorId, pageSortAttrsJSON) ));
    }
    
    /**
     * Name: getAllPOTypesForVendor
     * Desc: Get all related alternate parts for a vendor record
     * @param:  (1) vendorId - String - Vendor Id for which parts need to retrieved
     * @return: String - JSON format for all the alternate parts
    **/
    private static List<POType> getAllPOTypesForVendor(Id vendorId, String pageSortAttrsJSON) {
        List<POType> poTypes = POType.getAllPOTypesForVendor(vendorId, pageSortAttrsJSON);
        return poTypes;
    }
    
    /**
     * Name: getTotalPOTypesForVendor
     * Desc: Get total count for related PO Types of a vendor record
     * @param:  (1) vendorId - String - Vendor Id for which parts need to retrieved
     * @return: Integer - Total count
    **/
    private static Integer getTotalPOTypesForVendor(Id vendorId) {
        //return 500;
        return POType.getTotalPOTypesForVendor(vendorId);
    }
    
    public class AllPOTypesWrapper {
        // All records
        public List<POType> POTypes;
        
        // Total records
        public Integer TotalPOTypes;
        
        public AllPOTypesWrapper(Id vendorId, String pageSortAttrsJSON){
            this.poTypes = ViewVendorRelatedListCtrl.getAllPOTypesForVendor(vendorId, pageSortAttrsJSON);
            this.TotalPOTypes = POType.getTotalPOTypesForVendor(vendorId);
        }
    }
    /*****************************  END: PURCHASE ORDER TYPES SECTION   *****************************************/
    
    /*****************************  START: ACTIVE ORDERS SECTION    *****************************************/
    /**
     * Name: getAllActiveOrdersForVendor
     * Desc: Get all related active orders for a part record
     * @param:  (1) vendorId - String - Vendor Id for which parts need to retrieved
     * @return: String - JSON format for all the active order records
    **/
    private static List<ActiveOrder> getAllActiveOrdersForVendor(Id vendorId, String pageSortAttrsJSON) {
        List<ActiveOrder> activeOrders = ActiveOrder.getAllActiveOrdersForVendor(vendorId, pageSortAttrsJSON);
        return activeOrders;
    }
    
    /**
     * Name: getPaginatedActiveOrdersForVendor
     * Desc: Method to get records as per pagination and sorting attributes
     * @param: (1) vendorId - String
     * @return: String
    **/
    @RemoteAction
    global static String getPaginatedActiveOrdersForVendor(String vendorId, String pageSortAttrsJSON) {
        vendorId = Id.valueOf(BPUtility.getDecodedString(vendorId));
        pageSortAttrsJSON = BPUtility.getDecodedString(pageSortAttrsJSON);
        
        return BPUtility.getEncodedString(System.JSON.serialize( new AllActiveOrdersWrapper(vendorId, pageSortAttrsJSON) ));
    }
    
    public class AllActiveOrdersWrapper {
        // All records
        public List<ActiveOrder> activeOrders;
        
        // Total records
        public Integer TotalActiveOrders;
        
        public AllActiveOrdersWrapper(Id vendorId, String pageSortAttrsJSON){
            this.activeOrders = ViewVendorRelatedListCtrl.getAllActiveOrdersForVendor(vendorId, pageSortAttrsJSON);
            this.TotalActiveOrders = ActiveOrder.getTotalActiveOrdersForVendor(vendorId);
        }
    }
    /*****************************  END: ACTIVE ORDERS SECTION  *****************************************/
    
    /*****************************  START: CONTACT TYPES SECTION    *****************************************/
    /**
     * Name: getVendorContactById
     * Desc: Method to get Contact record information for contact Id in parameters
     * @param:  (1) contactId - Id
     * @return: String - List JSON format for record
    **/
    @RemoteAction
    global static String getVendorContactById(String contactId) {
        contactId = Id.valueOf(BPUtility.getDecodedString(contactId));
        
        if(contactId == null){
            return BPUtility.getEncodedString('[]');
        }
        
        // Else add the record in database
        Contact contactRecord = VendorContact.getContactDetailsById(contactId);
        if(contactRecord != null){
            return BPUtility.getEncodedString(System.JSON.serialize( new List<VendorContact>{new VendorContact(contactRecord)} ));
        }

        return BPUtility.getEncodedString('[]');
    }
    
    /**
     * Name: updateContactRelation
     * Desc: method to update record as preffered record
     * @param: (1) vendorId - String - Id of Alternate Vendor junction object record
     * @return: String
    **/
    @RemoteAction
    global static String updateContactRelation(String vendorId, String contactId, String relationValToUpdate) {
        vendorId = Id.valueOf(BPUtility.getDecodedString(vendorId));
        contactId = Id.valueOf(BPUtility.getDecodedString(contactId));
        relationValToUpdate = BPUtility.getDecodedString(relationValToUpdate);
        try{
            Contact recToUpdate = new Contact(Id = contactId, Relationship__c = relationValToUpdate);
            if(AccessControl.ifObjectIsUpdateable('Contact') == false){throw new BlackPurlException(Constants.OBJIECT_NOT_UPDATEABLE);}
            update recToUpdate;

            
            return BPUtility.getEncodedString(String.valueOf(getTotalContactsForVendor(vendorId)));
        }catch(exception ex){
            throw new BlackPurlException(BlackPurlException.getErrorMessage(ex.getMessage(), ex.getStackTraceString()));
        }
    }
    
    /**
     * Name: removeContact
     * Desc: Delete the record
     * @param: (1) contactId - String - Id of Alternate Vendor junction object record
     * @return: String
    **/
    @RemoteAction
    global static String removeContact(String vendorId, String contactId, String pageSortAttrsJSON) {
        vendorId = Id.valueOf(BPUtility.getDecodedString(vendorId));
        contactId = Id.valueOf(BPUtility.getDecodedString(contactId));
        pageSortAttrsJSON = BPUtility.getDecodedString(pageSortAttrsJSON);
        try{
            Contact recToDel = new Contact(Id = contactId);
            if(AccessControl.ifObjectIsDeletable('Contact') == false){throw new BlackPurlException(Constants.OBJIECT_NOT_DELETABLE);}
            delete recToDel;
            return BPUtility.getEncodedString(System.JSON.serialize( new AllContactsWrapper(vendorId, pageSortAttrsJSON) ));
        }catch(exception ex){
            throw new BlackPurlException(BlackPurlException.getErrorMessage(ex.getMessage(), ex.getStackTraceString()));
        }
    }
    
    /**
     * Name: getPaginatedContactsForVendor
     * Desc: Method to get records as per pagination and sorting attributes
     * @param: (1) contactId - String - Id of Alternate Vendor junction object record
     * @return: String
    **/
    @RemoteAction
    global static String getPaginatedContactsForVendor(String vendorId, String pageSortAttrsJSON) {
        vendorId = Id.valueOf(BPUtility.getDecodedString(vendorId));
        pageSortAttrsJSON = BPUtility.getDecodedString(pageSortAttrsJSON);
        
        return BPUtility.getEncodedString(System.JSON.serialize( new AllContactsWrapper(vendorId, pageSortAttrsJSON) ));
    }
    
    /**
     * Name: getAllContactsForVendor
     * Desc: Get all related alternate parts for a vendor record
     * @param:  (1) vendorId - String - Vendor Id for which parts need to retrieved
     * @return: String - JSON format for all the alternate parts
    **/
    private static List<VendorContact> getAllContactsForVendor(Id vendorId, String pageSortAttrsJSON) {
        List<VendorContact> contacts = VendorContact.getAllContactsForVendor(vendorId, pageSortAttrsJSON);
        return contacts;
    }
    
    /**
     * Name: saveVendorContact
     * Desc: Save details of contact for vendor
     * @param: (1) contactsJSON - String - Id of Vendor 
     * @return: String - JSON string of Vendor info. 
    **/
    @RemoteAction
    global static String saveVendorContact(String contactsJSON) {
        contactsJSON = BPUtility.getDecodedString(contactsJSON);
        try{
            List<VendorContact> vendorContactObjList = VendorContact.parse(contactsJSON);
            List<Contact> vendorContactListToInsert = new List<Contact>();
            for(VendorContact vendorContactObj : vendorContactObjList) {
                Contact vendorContactRec = new Contact(AccountId = vendorContactObj.Parentvendor);
                vendorContactRec.LastName = vendorContactObj.LastName;
        
                vendorContactRec.Is_Contact__c = (vendorContactObj.IsContact != null && vendorContactObj.IsContact);
                if(vendorContactRec.Is_Contact__c) {
                    vendorContactRec.Phone = vendorContactObj.Phone;
                    vendorContactRec.Extension__c = vendorContactObj.Extension;
                    vendorContactRec.Email = vendorContactObj.Email;
                } else {
                    vendorContactRec.Phone = null;
                    vendorContactRec.Extension__c = null;
                    vendorContactRec.Email = null;
                }
                vendorContactRec.Is_Shipping_Address__c = (vendorContactObj.IsShippingAddress != null && vendorContactObj.IsShippingAddress);
                if(vendorContactRec.Is_Shipping_Address__c) {
                    if(String.isBlank(vendorContactObj.ShippingStreet1) && String.isNotBlank(vendorContactObj.ShippingStreet2)) {
                        vendorContactRec.MailingStreet = '\n' + vendorContactObj.ShippingStreet2;
                    } else if(String.isBlank(vendorContactObj.ShippingStreet2) && String.isNotBlank(vendorContactObj.ShippingStreet1)) {
                        vendorContactRec.MailingStreet = vendorContactObj.ShippingStreet1 + '\n';
                    } else if(String.isNotBlank(vendorContactObj.ShippingStreet1) && String.isNotBlank(vendorContactObj.ShippingStreet2)) {
                        vendorContactRec.MailingStreet = vendorContactObj.ShippingStreet1 + '\n' + vendorContactObj.ShippingStreet2;
                    }
                    vendorContactRec.MailingCity = vendorContactObj.ShippingCity;
                    vendorContactRec.MailingState = vendorContactObj.ShippingState;
                    vendorContactRec.MailingPostalCode = vendorContactObj.ShippingPostalCode;
                    vendorContactRec.MailingCountry = vendorContactObj.ShippingCountry;
                    vendorContactRec.Mailing_County_Parish__c = vendorContactObj.ShippingCountyParish;
                } else {
                    vendorContactRec.MailingStreet = vendorContactRec.MailingCity = vendorContactRec.MailingState = 
                    vendorContactRec.MailingPostalCode = vendorContactRec.MailingCountry = vendorContactRec.Mailing_County_Parish__c = null;
                }
                if(vendorContactObj.Id != null) {
                    vendorContactRec.Id = vendorContactObj.Id;
                }
                vendorContactListToInsert.add(vendorContactRec);
            }
            DMLUtility.upsertSobjectList('Contact', vendorContactListToInsert);
            if(!vendorContactListToInsert.isEmpty()) {
                Contact contactRecord = VendorContact.getContactDetailsById(vendorContactListToInsert[0].Id);
                return BPUtility.getEncodedString(System.JSON.serialize( new List<VendorContact.VendorContactWrapper>{new VendorContact.VendorContactWrapper(contactRecord, contactRecord.AccountId)} ));
            }
            return BPUtility.getEncodedString('[]');
        }catch(exception ex){
            throw new BlackPurlException(BlackPurlException.getErrorMessage(ex.getMessage(), ex.getStackTraceString()));
        }
    }
    
    /**
     * Name: getTotalContactsForVendor
     * Desc: Get total count for related PO Types of a vendor record
     * @param:  (1) vendorId - String - Vendor Id for which parts need to retrieved
     * @return: Integer - Total count
    **/
    private static Integer getTotalContactsForVendor(Id vendorId) {
        return VendorContact.getTotalContactsForVendor(vendorId);
    }
    
    public class AllContactsWrapper {
        // All records
        public List<VendorContact> Contacts;
        
        // Total records
        public Integer TotalContacts;
        
        public AllContactsWrapper(Id vendorId, String pageSortAttrsJSON){
            this.contacts = ViewVendorRelatedListCtrl.getAllContactsForVendor(vendorId, pageSortAttrsJSON);
            this.TotalContacts = VendorContact.getTotalContactsForVendor(vendorId);
        }
    }
    /*****************************  END: CONTACT TYPES SECTION  *****************************************/
    
    /*****************************  START: PRODUCTS SECTION *****************************************/
    /**
     * Name: addProductToVendor
     * Desc: Add a Purchase Order record with supplied values
     * @param:  (1) poTypesJSON - String - JSON formatted array of Purchase Order records need to be inserted
     * @return: String - If a single record is inserted, then return value will be detailed record in JSON format
    **/
    @RemoteAction
    global static String addUpdateProductToVendor(String productsJSON) {
        productsJSON = BPUtility.getDecodedString(productsJSON);
        try{
            List<VendorProduct> productsList = VendorProduct.parse(productsJSON);
            if(productsList.size() == 0){
                return BPUtility.getEncodedString('[]');
            }
            
            Set<String> productCodeSet = new Set<String>();
            String vendorId = null;
            for(VendorProduct productObj : productsList){
        		productCodeSet.add(productObj.Code);
        		vendorId = productObj.VendorId;
            }
            
            List<Product__c> existingProductWithDuplicateCodeList = [Select Id, Code__c from Product__c where Code__c IN :productCodeSet AND Vendor__c =: vendorId];
            
            List<VendorProduct> vendorProductWithUniqueCode = new List<VendorProduct>();
            
            // Else add the record in database
            List<Product__c> productsToUpsert = new List<Product__c>();
            // Edited by Kajal - #1226 - 10/12/2016
            for(VendorProduct productObj : productsList){
                Product__c productRecord = new Product__c(  Vendor__c       = productObj.VendorId,
                                                            Code__c         = productObj.Code,
                                                            Description__c  = productObj.Description,
                                                            Price__c        = productObj.Price,
                                                            Type__c         = productObj.Type,
                                                            Category__c     = productObj.CategoryId,
                                                            Deductible__c   = productObj.Deductible,
                                                            Mileage__c      = productObj.Mileage,
                                                            Term__c         = productObj.Term,
                                                            Taxable__c      = productObj.IsTaxable,
                                                            Applicable_Tax__c = (productObj.IsTaxable == true) ? productObj.ApplicableTaxId : null,
                                                            cost_method__c = productObj.CostMethod,
                                                            Cost__c         = (productObj.CostMethod == 'Price withheld') ? 0 : productObj.Cost
                                                        );
                if(productObj.Id != null) {
                    productRecord.Id = productObj.Id;
                }
                
                Boolean isDuplicateCodeExists = false;
                for(Product__c productRec : existingProductWithDuplicateCodeList) {
                	if((String.isBlank(productObj.Id) || (productObj.Id != productRec.Id)) && productRec.Code__c == productObj.Code) {
                		isDuplicateCodeExists = true;
                	}
	            }
                validateProduct(productRecord);
	            if(!isDuplicateCodeExists) {
                    productsToUpsert.add(productRecord);
                }
            }
            
            if(productsToUpsert.size() != productsList.size()) {
            	return BPUtility.getEncodedString('Product Code already present for vendor');
            }
            
            if(AccessControl.ifObjectFieldIsCreateable('Product__c') == false ){throw new BlackPurlException(Constants.OBJIECT_NOT_CREATEABLE);}
            if(AccessControl.ifObjectIsUpdateable('Product__c') == false ){throw new BlackPurlException(Constants.OBJIECT_NOT_ACCESSIBLE);}
            upsert productsToUpsert;
            
            if(productsList.size() == 1) {
                List<Product__c> productRecords = SOQLUtil.getProductRecordsById(new List<Id>{productsToUpsert[0].Id});
                return BPUtility.getEncodedString(System.JSON.serialize( new List<VendorProduct.ProductWrapper>{new VendorProduct.ProductWrapper(productRecords[0], productsToUpsert[0].Vendor__c)} ));
            }
            return BPUtility.getEncodedString('[]');
        }catch(exception ex){
            throw new BlackPurlException(BlackPurlException.getErrorMessage(ex.getMessage(), ex.getStackTraceString()));
        } 
    }

    private static void validateProduct(Product__c productRec) {
        if(String.isNotBlank(productRec.Type__c) && String.isNotBlank(productRec.Cost_Method__c) && ((productRec.Type__c.equalsIgnoreCase('Financing Product') && productRec.Cost_Method__c.equalsIgnoreCase('Price withheld') && 
        ((productRec.Taxable__c != null && productRec.Taxable__c) || productRec.Applicable_Tax__c != null))
         || (!productRec.Type__c.equalsIgnoreCase('Financing Product') && (productRec.Cost_Method__c.equalsIgnoreCase('Price withheld') || productRec.Cost_Method__c.equalsIgnoreCase('Cost withheld'))))) {
            throw new BlackPurlException('Invalid configurations for product type.');
        }
    }

    /* START: Added by Kajal - #1226 - 10/12/2016 */
    /**
     * Name: getCustomerPreferredContactsOptions
     * Desc: Method used to return a list of all product types
     * @param: 
     * @return: String
    **/
    @RemoteAction
    global static String getListOfAllProductTypes() {
        String ObjectApi_name = Constants.NAMESPACE + 'Product__c';
        String fieldName = Constants.NAMESPACE + 'Type__c';
        List<String> listElementsForProductTypes = new List<String>();
        
        Map<String, Schema.SObjectType> globalDesMap = Schema.getGlobalDescribe();
        Schema.SObjectType targetType = globalDesMap.get(ObjectApi_name);
        Sobject Object_name = targetType.newSObject();
        Schema.sObjectType sobject_type = Object_name.getSObjectType();
        Schema.DescribeSObjectResult sobject_describe = sobject_type.getDescribe();
        Map<String, Schema.SObjectField> field_map = sobject_describe.fields.getMap();
        List<Schema.PicklistEntry> pick_list_values = field_map.get(fieldName).getDescribe().getPickListValues();
        
        for (Schema.PicklistEntry a : pick_list_values) {
            //listElementsForProductTypes += '<option value="' + a.getValue() + '">' + a.getValue() + '</option>';
            listElementsForProductTypes.add(a.getValue());
        }
        
        return BPUtility.getEncodedString(System.JSON.serialize(listElementsForProductTypes));
    }

    /**
     * Name: getApplicableTaxList
     * Desc: To get Labour Details on Edit Labour Pop Up window
     * @param: 
     * @return: String - JSON string of Part info. 
    **/
    @RemoteAction
    global static String getApplicableTaxList() {
        String defaultLaborTaxId = Configurations__c.getOrgDefaults().Default_Tax_on_Vendor_Product__c;
        String taxWrapperJSON = TaxUtility.getApplicableList(defaultLaborTaxId);
        TaxUtility.Tax taxObj = (TaxUtility.Tax) System.JSON.deserialize(taxWrapperJSON, TaxUtility.Tax.class);
        ProductMasterDataWrapper masterDataObj = new ProductMasterDataWrapper(taxObj);
        return BPUtility.getEncodedString(system.JSON.serialize(masterDataObj));
    }

     /* END: Added by Kajal - #1226 - 10/12/2016 */
     /**
     * Name: getSimilarProduct
     * Desc: Method to get similar Products
     * @param:  (1) productCode - Code of Product
     * @return: String - List JSON format for similar record
    **/
    @RemoteAction
    global static String getSimilarProduct(String productCode, String vendorId, String productId) {
        productCode = BPUtility.getDecodedString(productCode);
        vendorId = Id.valueOf(BPUtility.getDecodedString(vendorId));
        productId = Id.valueOf(BPUtility.getDecodedString(productId));
        productCode = BPUtility.escapeSingleQuotes(productCode);
        vendorId = BPUtility.escapeSingleQuotes(vendorId);
        productId = BPUtility.escapeSingleQuotes(productId);
        if(AccessControl.ifObjectFieldIsAccessible('Product__c') == false) { throw new BlackPurlException(Constants.OBJIECT_NOT_ACCESSIBLE); }
        List<Product__c> productList = [select Id from Product__c where Code__c =: productCode AND Vendor__c =: vendorId AND Id != :productId];
        String isSimilarPresent;
        if(productList.size() > 0) {
            isSimilarPresent = 'true';
        } else {
            isSimilarPresent = 'false';
        }
        return BPUtility.getEncodedString(isSimilarPresent);

    }


    /**
     * Name: getProductInfoById
     * Desc: Method to get VendorProduct record information for VendorProduct Id in parameters
     * @param:  (1) productId - Id
     * @return: String - List JSON format for record
    **/
    @RemoteAction
    global static String getProductInfoById(String productId) {
        productId = Id.valueOf(BPUtility.getDecodedString(productId));
        try{
            if(productId == null){
                return BPUtility.getEncodedString('[]');
            }
            
            // Else add the record in database
            List<Product__c> productRecords = SOQLUtil.getProductRecordsById(new List<Id>{productId} );
            if(productRecords.size() != 0){
                return BPUtility.getEncodedString(System.JSON.serialize( new List<VendorProduct>{new VendorProduct(productRecords[0])} ));
            }
            return '[]';
        }catch(exception ex){
            throw new BlackPurlException(BlackPurlException.getErrorMessage(ex.getMessage(), ex.getStackTraceString()));
        } 
    }
    
    /* Edited by Kajal - #1227 - 10/17/2016 */
    /**
     * Name: getSystemDefaultCategory
     * Desc: Method to get system default category value as per vendor id
     * @param:  (1) vendorId - Id
     * @return: String - List JSON format for record
    **/
    @RemoteAction
    global static String getSystemDefaultCategory(String vendorId) {
        vendorId = BPUtility.getDecodedString(vendorId);
        vendorId = BPUtility.escapeSingleQuotes(vendorId);
        if(AccessControl.ifObjectFieldIsAccessible('Category__c') == false) { throw new BlackPurlException(Constants.OBJIECT_NOT_ACCESSIBLE); }
        if(AccessControl.ifObjectFieldIsAccessible('Account') == false) { throw new BlackPurlException(Constants.OBJIECT_NOT_ACCESSIBLE); }
        List<Category__c> categoryList = new List<Category__c>();
        if(vendorId == '') {
            categoryList = [select Id, Name from Category__c WHERE default__c = true and Type__c = 'Vendor Product'];
        } else {
            List<Account> vendorList = [select Id, Part_Category_Default__c, Part_Category_Default__r.Name from Account where Id = :vendorId AND Is_Vendor__c = true];
            if(vendorList.size() > 0 && vendorList[0].Part_Category_Default__c != null) {
                Category__c categoryRec = new Category__c (Name = vendorList[0].Part_Category_Default__r.Name, Id = vendorList[0].Part_Category_Default__c);
                categoryList.add(categoryRec);
            } else {
                categoryList = [select Id, Name from Category__c WHERE default__c = true and Type__c = 'Vendor Product'];
            }
        } 
        String jsonString = '{}'; 
        if(categoryList.size() > 0) {
            JSONGenerator gen = JSON.createGenerator(true);
            gen.writeStartObject();
            gen.writeStringField('DefaultCategoryId', categoryList[0].Id); 
            gen.writeStringField('DefaultCategoryName', categoryList[0].Name);
            gen.writeEndObject();
            jsonString = gen.getAsString();
        }
        return BPUtility.getEncodedString(jsonString);
        //return PartOverviewCtrl.getDefaultCategory(BPUtility.getEncodedString(vendorId));
    }
    
    /**
     * Name: removeProduct  
     * Desc: Delete the record
     * @param: (1) productId - String - Id of Alternate Vendor junction object record
     * @return: String
    **/
    @RemoteAction
    global static String removeProduct(String vendorId, String productId, String pageSortAttrsJSON) {
        vendorId = Id.valueOf(BPUtility.getDecodedString(vendorId));
        productId = Id.valueOf(BPUtility.getDecodedString(productId));
        pageSortAttrsJSON = BPUtility.getDecodedString(pageSortAttrsJSON);
        try{
            // Start: Added and Commented by richa #2363
            //Product__c recToDel = new Product__c(Id = productId);
            List<Product__c> productToDelList = [select Id, (select Id, Deal__r.CO_Header__r.Order_status__c from Options_Fees__r), (select Id, Service_Order_Header__r.CO_Header__r.Order_status__c from Service_Order_Line_Items__r) from Product__c where Id =: productId];
            if(productToDelList.size() > 0) {
                if(productToDelList[0].Options_Fees__r.size() > 0) {
                    for(Option_Fee__c opItem: productToDelList[0].Options_Fees__r) {
                        if(opItem.Deal__r.CO_Header__r.Order_status__c == 'Open') {
                            return BPUtility.getEncodedString(System.JSON.serialize(new ResponseWrapper('error', 'Vendor Product currently being used on active customer orders, cannot remove')));
                            //return BPUtility.getEncodedString('Product cant be removed as it has active CO');
                        }
                    }
                }
                if(productToDelList[0].Service_Order_Line_Items__r.size() > 0) {
                    for(Service_Order_Line_Item__c soli: productToDelList[0].Service_Order_Line_Items__r) {
                        if(soli.Service_Order_Header__r.CO_Header__r.Order_status__c == 'Open') {
                            return BPUtility.getEncodedString(System.JSON.serialize(new ResponseWrapper('error', 'Vendor Product currently being used on active customer orders, cannot remove')));
                            //return BPUtility.getEncodedString('Product cant be removed as it has active CO');
                        }
                    }
                }
                if(AccessControl.ifObjectIsDeletable('Product__c') == false ){throw new BlackPurlException(Constants.OBJIECT_NOT_DELETABLE);}
                delete productToDelList[0];
            }
            /*if(AccessControl.ifObjectIsDeletable('Product__c') == false ){throw new BlackPurlException(Constants.OBJIECT_NOT_DELETABLE);}
            delete recToDel;*/
            // End: Added and Commented by richa #2363
            return BPUtility.getEncodedString(System.JSON.serialize( new AllProductsWrapper(vendorId, pageSortAttrsJSON) ));
        }catch(exception ex){
            throw new BlackPurlException(BlackPurlException.getErrorMessage(ex.getMessage(), ex.getStackTraceString()));
        } 
    }

    @RemoteAction
    global static String getVendorContactMasterData() {
        return ViewCustomerCtrl.getCustomerContactMasterData();
    }

    /**
     * Name: getPaginatedProductsForVendor
     * Desc: Method to get records as per pagination and sorting attributes
     * @param: (1) productId - String - Id of Alternate Vendor junction object record
     * @return: String
    **/
    @RemoteAction
    global static String getPaginatedProductsForVendor(String vendorId, String pageSortAttrsJSON) {
        vendorId = Id.valueOf(BPUtility.getDecodedString(vendorId));
        pageSortAttrsJSON = BPUtility.getDecodedString(pageSortAttrsJSON);
        
        return BPUtility.getEncodedString(System.JSON.serialize( new AllProductsWrapper(vendorId, pageSortAttrsJSON) ));
    }
    
    
    /**
     * Name: getAllProductsForVendor
     * Desc: Get all related alternate parts for a vendor record
     * @param:  (1) vendorId - String - Vendor Id for which parts need to retrieved
     * @return: String - JSON format for all the alternate parts
    **/
    private static List<VendorProduct> getAllProductsForVendor(Id vendorId, String pageSortAttrsJSON) {
        List<VendorProduct> products = VendorProduct.getAllProductsForVendor(vendorId, pageSortAttrsJSON);
        return products;
    }
    
    /**
     * Name: getTotalProductsForVendor
     * Desc: Get total count for related PO Types of a vendor record
     * @param:  (1) vendorId - String - Vendor Id for which parts need to retrieved
     * @return: Integer - Total count
    **/
    private static Integer getTotalProductsForVendor(Id vendorId) {
        return VendorProduct.getTotalProductsForVendor(vendorId);
    }
    
    public class AllProductsWrapper {
        // All records
        public List<VendorProduct> Products;
        
        // Total records
        public Integer TotalProducts;
        
        public AllProductsWrapper(Id vendorId, String pageSortAttrsJSON){
            this.products = ViewVendorRelatedListCtrl.getAllProductsForVendor(vendorId, pageSortAttrsJSON);
            this.TotalProducts = VendorProduct.getTotalProductsForVendor(vendorId);
        }
    }
    /*****************************  END: PRODUCTS SECTION   *****************************************/
    
    global static String getAllActiveSalesTax(String vendorId) { return '';}
    
    global static String saveTaxExeptionList(String vendorId, String taxExemptionJSONString, String taxExemptionPageSortAttrsJSON) { return '';}
        
    /**
     * Name: parsePageAttrs
     * Desc: Method to Parse JSON String to class instance for Pagination and sort attributes
     * @param:  (1) JSONString - String - JSON String 
     * @return: PaginationSorting - Class Object
    **/
    public static PaginationSorting parsePageAttrs(String json) {
        return (PaginationSorting) System.JSON.deserialize(json, PaginationSorting.class);
    }
    
    // Wrapper class for pagination and sorting combination
    public class PaginationSorting {
        
        // Current page number
        public Integer CurrentPage;
        
        // Current page size
        public Integer PageSize;
        
        // Sorting list
        public List<SortAttrs> Sorting;
    }
    
    // SortAttrs for sorting attributes
    public class SortAttrs {
        // Field name
        public String FieldName;
        
        // Sort direction
        public String SortDirection;
    }
    
     //Added by gourav 13/07/17  for ds2    
     /**
    * Name: ProductMasterDataWrapper
    * Description: Apex class product Master Data
    **/
    
    public class ProductMasterDataWrapper {
        public TaxUtility.Tax taxObj;
        
        public ProductMasterDataWrapper(TaxUtility.Tax taxObj) {
            this.taxObj = taxObj;
        }
    }
}