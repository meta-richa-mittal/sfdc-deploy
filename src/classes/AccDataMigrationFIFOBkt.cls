global without sharing class AccDataMigrationFIFOBkt implements Database.batchable<sObject>,Database.Stateful {
	
	global AccDataMigrationFIFOBkt() {}
	global AccDataMigrationFIFOBkt(List<Id> recordIds, boolean exportAllData) {}
	global AccDataMigrationFIFOBkt(List<Id> recordIds, boolean exportAllData, String timePeriod, DateTime fromDate, DateTime toDate) {}
	
	private String objName = 'Part_FIFO_Bucket__c';
	private String value = '';
	private Integer totalRecords = 0;
	private String query;
	private DateTime Last_Synched_Date;
	private String timePeriodForFilter;
	private DateTime fromDate;
	private DateTime toDate;
	private Accounting_Data_Migration__c dataMigration;
	
	/**
     * Name: executeDataMigrationBatch
     * Desc: method to start the batch for data export
    **/
	public static Id executeDataMigrationBatch(Integer batchSize, List<Id> recordIds, String timePeriod, DateTime fromDate, DateTime toDate, String objNameToExport) {
		Id batchId = Database.executeBatch(new AccDataMigrationFIFOBkt(recordIds, timePeriod, fromDate, toDate, objNameToExport), batchSize);
		return batchId;
	}
	
	/**
     * Name: AccDataMigrationFIFOBkt
     * Desc: Constructor to start the batch for data export
    **/
	global AccDataMigrationFIFOBkt(List<Id> recordIds, String timePeriod, DateTime fromDate, DateTime toDate, String objNameToExport) {
		if(AccessControl.ifObjectFieldIsAccessible('Accounting_Data_Migration__c') == false) { throw new BlackPurlException(Constants.OBJIECT_NOT_ACCESSIBLE); }
		
		this.timePeriodForFilter = timePeriod;
		this.fromDate = fromDate;
		this.toDate = toDate;
		dataMigration = DataExportUtil.getAccountingDataMigrationRec(objNameToExport);
		Last_Synched_Date = dataMigration.Last_Synched_Date__c;
		dataMigration = DataExportUtil.getDateRange(timePeriod, Last_Synched_Date, fromDate, toDate, new List<Accounting_Data_Migration__c>{dataMigration});
		dataMigration.Last_Synched_Date__c = Datetime.now();
		DMLUtility.upsertSobjectList('Accounting_Data_Migration__c', dataMigration);
    	
    	if(AccessControl.ifObjectFieldIsAccessible('Part_FIFO_Bucket__c') == false) { throw new BlackPurlException(Constants.OBJIECT_NOT_ACCESSIBLE); }
    	if(AccessControl.ifObjectFieldIsAccessible('Part_FIFO_Bucket_Activity_Line_Item__c') == false) { throw new BlackPurlException(Constants.OBJIECT_NOT_ACCESSIBLE); }
    	query = DataExportUtil.createQuery(recordIds, 'Id', this.timePeriodForFilter, Last_Synched_Date, fromDate, toDate, this.objName);
	}
	
	/**
     * Name: start
     * Desc: Batch start method - Create query and execute query locator
     * @param: 
     * @return: Database.QueryLocator
    **/
	global Iterable<Sobject> start(Database.BatchableContext BC) {
		//return Database.getQueryLocator(query);
		String partFIFOBktActivityLIQuery = DataExportUtil.createQuery(null, null, this.timePeriodForFilter, Last_Synched_Date, fromDate, toDate, 'Part_FIFO_Bucket_Activity_Line_Item__c');
		String unitPriceAndCostQuery = DataExportUtil.createQuery(null, null, this.timePeriodForFilter, Last_Synched_Date, fromDate, toDate, 'Unit_Price_Cost__c');
		return getRecords(query, partFIFOBktActivityLIQuery, unitPriceAndCostQuery);
	}
	
	private List<Sobject> getRecords(String query, String query1, String query2) {
		List<SObject> sObjectList = new List<SObject>();
		List<sObject> resultList = Database.query(query);
		if(resultList.size() > 0) {
			sObjectList.addAll(resultList);
		}
		resultList = Database.query(query1);
		if(resultList.size() > 0) {
			sObjectList.addAll(resultList);
		}
		resultList = Database.query(query2);
		if(resultList.size() > 0) {
			sObjectList.addAll(resultList);
		}
		return sObjectList;
	}
	
	/**
     * Name: execute
     * Desc: Batch execute method to process the exported data records
     * @param:	1. Database.BatchableContext BC
     * 			2. List<sObject> scope
     * @return:
    **/
	global void execute(Database.BatchableContext BC, List<sObject> scope) {
		value = '{}\n';
		for(String fieldNameStr : DataExportUtil.objNameToOrderedCardFieldMap.get(this.objName)) {
			value += DataExportUtil.objNameToCardSFFieldToAccountingFieldsMap.get(this.objName).get(fieldNameStr) + DataExportUtil.fileSeparator;
		}
		value = value.subString(0, value.length()-1);
		value += '\n';
		
		List<Part_FIFO_Bucket__c> partFifoRecords = new List<Part_FIFO_Bucket__c>();
		List<Part_FIFO_Bucket_Activity_Line_Item__c> adjustRec = new List<Part_FIFO_Bucket_Activity_Line_Item__c>();
		if(scope.size() > 0) {
			for(Sobject sobj : scope) {
				Id recordId = String.valueOf(sobj.get('Id'));
				if(recordId.getSObjectType().getDescribe().getName() == Constants.Namespace + 'Part_FIFO_Bucket__c') {
					Part_FIFO_Bucket__c partFIFOBucketItem = (Part_FIFO_Bucket__c)sobj;
					if(partFIFOBucketItem.Cost__c == null || partFIFOBucketItem.Cost__c == 0) continue;
					
			    	if(String.isBlank(partFIFOBucketItem.Reference__c) && String.isNotBlank(partFIFOBucketItem.Source_Name__c) &&
			    									partFIFOBucketItem.Source_Name__c.toLowerCase() == 'oversold') {
			    		totalRecords++;
			    		value += AccountingPartFIFOWrapper.AccountingPartFIFOWrapperRec(partFIFOBucketItem) + '\n\n';	
			    	
			    	} else if(partFIFOBucketItem.Is_FIFO_Bucket__c && partFIFOBucketItem.Reference__c.toLowerCase().indexOf('Count Adjustment'.toLowerCase()) != -1) {
			    		totalRecords++;
			        	value += AccountingPartFIFOWrapper.AccountingPartFIFOWrapperRec(partFIFOBucketItem) + '\n\n';
			        	for(Part_FIFO_Bucket_Activity_Line_Item__c fifoActivityRec : partFIFOBucketItem.Part_FIFO_Bucket_Activity_Line_Items__r ){
			        		if(String.isNotBlank(fifoActivityRec.Reference__c) && fifoActivityRec.Reference__c.toLowerCase().indexOf('Count Adjustment'.toLowerCase()) != -1){
			        			totalRecords++;
				        		value += AccountingPartFIFOWrapper.PartFIFOActivityLineItemRec(fifoActivityRec, partFIFOBucketItem) + '\n\n';
			        		}
			        	}
			    	} else if(partFIFOBucketItem.Is_FIFO_Bucket__c && (partFIFOBucketItem.Reference__c.toLowerCase().indexOf('re'.toLowerCase()) != -1) || (partFIFOBucketItem.Reference__c.toLowerCase().indexOf('Cost Adjustment'.toLowerCase()) != -1)){
			    		totalRecords++;
			    		value += AccountingPartFIFOWrapper.AccountingPartFIFOWrapperCostRec(partFIFOBucketItem) + '\n\n';
			        	for(Part_FIFO_Bucket_Activity_Line_Item__c  activityRec : partFIFOBucketItem.Part_FIFO_Bucket_Activity_Line_Items__r ){
			        		if(String.isNotBlank(activityRec.Reference__c)&& ((activityRec.Reference__c.toLowerCase().indexOf('Cost Adjustment'.toLowerCase()) != -1) || (activityRec.Reference__c.toLowerCase().indexOf('Pre'.toLowerCase()) != -1))){
			        			totalRecords++;
				        		value += AccountingPartFIFOWrapper.PartFIFOActivityCostLineItemRec(activityRec,partFIFOBucketItem) + '\n\n';
			        		}
			        	}
			    	}  
		    	} else if(recordId.getSObjectType().getDescribe().getName() == Constants.Namespace + 'Part_FIFO_Bucket_Activity_Line_Item__c') {
		    		Part_FIFO_Bucket_Activity_Line_Item__c activityRec = (Part_FIFO_Bucket_Activity_Line_Item__c)sobj;
		    		if(activityRec.Part_FIFO_Bucket__r.Cost__c == null || activityRec.Part_FIFO_Bucket__r.Cost__c == 0) continue;
		    		if(activityRec.Reference__c == 'Cost Adjustment') {
		    			totalRecords++;
		        		value += AccountingPartFIFOWrapper.PartFIFOActivityCostAdjustItemRec(activityRec) + '\n\n';
		    		} else if(activityRec.Reference__c == 'Count Adjustment' || activityRec.CO_Invoice_Header__c != null || activityRec.Return_VO_Header__c != null) {
		    			totalRecords++;
		        		value += AccountingPartFIFOWrapper.PartFIFOActivityCountAdjustItemRec(activityRec) + '\n\n';
		    		}
		    	} else if(recordId.getSObjectType().getDescribe().getName() == Constants.Namespace + 'Unit_Price_Cost__c') {
		    		Unit_Price_Cost__c adjstmntRec = (Unit_Price_Cost__c)sobj;
		    		totalRecords++;
	        		value += AccountingPartFIFOWrapper.UnitCostAdjustItemRec(adjstmntRec) + '\n\n';
		    	}
			}
		}
		/*if(partFifoRecords.size() > 0) {
		    for(Part_FIFO_Bucket__c partFIFOBucketItem : partFifoRecords) {}
		}
		String query = DataExportUtil.createQuery(null, null, this.timePeriodForFilter, Last_Synched_Date, fromDate, toDate, 'Part_FIFO_Bucket_Activity_Line_Item__c');
    	List<Part_FIFO_Bucket_Activity_Line_Item__c> adjustRec = Database.query(query);
	    
	    if(adjustRec.size() > 0) {
	    	for(Part_FIFO_Bucket_Activity_Line_Item__c activityRec : adjustRec) {
	    		if(activityRec.Reference__c == 'Cost Adjustment') {
	    			totalRecords++;
	        		value += AccountingPartFIFOWrapper.PartFIFOActivityCostAdjustItemRec(activityRec) + '\n\n';
	    		} else if(activityRec.Reference__c == 'Count Adjustment' || activityRec.CO_Invoice_Header__c != null || activityRec.Return_VO_Header__c != null) {
	    			totalRecords++;
	        		value += AccountingPartFIFOWrapper.PartFIFOActivityCountAdjustItemRec(activityRec) + '\n\n';
	    		}
	    	}
		}*/
	}
	
	/**
     * Name: finish 
     * Desc: Batch finish method to insert a attachment for exported data in text file
     * @param:	1. Database.BatchableContext BC
     * @return:
    **/
	global void finish(Database.BatchableContext BC) {
    	dataMigration.Records_Processed__c = totalRecords;
		DMLUtility.upsertSobjectList('Accounting_Data_Migration__c', dataMigration);
    	
    	if(dataMigration.Records_Processed__c > 0) {
	    	if(AccessControl.ifObjectFieldIsCreateable('Attachment') == false) { throw new BlackPurlException(Constants.OBJIECT_NOT_CREATEABLE); }
	    	insert DataExportUtil.createAttachment(value, 'GENERAL_JOURNAL_COUNT_COST_ADJUSTMENT_', dataMigration, totalRecords);
    	}
	}
}